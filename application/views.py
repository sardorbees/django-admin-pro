from rest_framework import generics, status
from rest_framework.response import Response
from django.utils import timezone
from datetime import timedelta, datetime
from django.core.cache import cache
from pytz import timezone as django_timezone

from .models import Application
from .serializers import ApplicationSerializer
import requests

TELEGRAM_TOKEN = '8315654621:AAEaT5snbVMfJHTv8ZBkvIDJQbw7953ji10'
TELEGRAM_CHAT_ID = '1756108441'

def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    return x_forwarded_for.split(',')[0] if x_forwarded_for else request.META.get('REMOTE_ADDR')

class ApplicationCreateView(generics.CreateAPIView):
    queryset = Application.objects.all()
    serializer_class = ApplicationSerializer

    def create(self, request, *args, **kwargs):
        ip = get_client_ip(request)
        phone = request.data.get('phone')
        redis_key = f'form_block_ip_{ip}'
        one_hour_ago = timezone.now() - timedelta(hours=1)

        # Redis: IP —É–∂–µ –µ—Å—Ç—å ‚Äî –æ—Ç–∫–∞–∑
        if cache.get(redis_key):
            return Response(
                {"detail": "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã."},
                status=status.HTTP_429_TOO_MANY_REQUESTS
            )

        # IP + –Ω–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ ‚Äî –æ—Ç–∫–∞–∑
        if Application.objects.filter(
                phone=phone,
                ip_address=ip,
                created_at__gte=timezone.now() - timedelta(minutes=2)
        ).exists():
            return Response(
                {"detail": "–° —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ IP —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã."},
                status=status.HTTP_429_TOO_MANY_REQUESTS
            )

        # –î–æ–±–∞–≤–∏–º IP –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
        data = request.data.copy()
        data['ip_address'] = ip

        serializer = self.get_serializer(data=data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)

        # –ó–∞–±–ª–æ–∫–∏—Ä—É–µ–º IP –Ω–∞ 1 —á–∞—Å –≤ Redis
        cache.set(redis_key, '1', timeout=60 * 60)

        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    def perform_create(self, serializer):
        application = serializer.save()
        self.send_telegram_notification(application)

    def send_telegram_notification(self, application):
        # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞
        uz_time = datetime.now(django_timezone('Asia/Tashkent'))
        if 9 <= uz_time.hour <= 20:  # –¢–æ–ª—å–∫–æ —Å 9:00 –¥–æ 20:00
            message = (
                f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ solar-energy\n"
                f"üë§ –ò–º—è: {application.full_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone}\n"
                f"üè† –ê–¥—Ä–µ—Å: {application.address}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {application.description}\n"
                f"üåê IP: {application.ip_address}"
            )
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID, "text": message})

from rest_framework.views import APIView
class UnlockIPView(APIView):
    def get(self, request, *args, **kwargs):
        ip = get_client_ip(request)
        redis_key = f'form_block_ip_{ip}'
        cache.delete(redis_key)
        return Response({"detail": "IP —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É."}, status=200)


import requests
from django.conf import settings

def verify_recaptcha(token):
    url = 'https://www.google.com/recaptcha/api/siteverify'
    data = {
        'secret': settings.RECAPTCHA_SECRET_KEY,
        'response': token
    }
    resp = requests.post(url, data=data).json()
    return resp.get('success'), resp.get('score', 0.0)